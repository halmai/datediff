package main

import "fmt"

// lengthOfMonth tells how many days are there in a particular month of a year.
// Example:
// - lengthOfMonth(2001, 2) returns 28
// - lengthOfMonth(2004, 2) returns 29
// - lengthOfMonth(2100, 2) returns 28
// - lengthOfMonth(2400, 2) returns 29
func lengthOfMonth(year, month int) int {
	// fmt.Println("Y M:", year, month)
	switch month {
	case 4:
		fallthrough
	case 6:
		fallthrough
	case 9:
		fallthrough
	case 11:
		return 30
	case 1:
		fallthrough
	case 3:
		fallthrough
	case 5:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 10:
		fallthrough
	case 12:
		return 31
	}

	// fmt.Println("beyond return", month)

	// if we get here, it must be February
	if isLeapYear(year) {
		return 29
	}

	return 28
}

// isLeapYear tells whether a particular year is a leap year or not.
func isLeapYear(year int) bool {
	if year%400 == 0 {
		return true
	}

	if year%100 == 0 {
		return false
	}

	if year%4 == 0 {
		return true
	}

	return false
}

// indexOfDayWithinAYear tells about a particular day which day it is withing the year (by index).
// The values of (year, month, day) must be a valid triplet.
// Example:
// dayOfYear(2022, 1, 1) returns 1
// dayOfYear(2022, 1, 2) returns 2
// dayOfYear(2022, 2, 1) returns 32
// dayOfYear(2022, 12, 31) returns 365
func indexOfDayWithinAYear(year int, month int, day int) int {
	monthStartsAtDay := [...]int{1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 /*366*/}

	result := monthStartsAtDay[month-1] + day - 1

	if isLeapYear(year) {
		switch {
		case month > 2:
			result++
		case month == 2:
			if day > 28 {
				result++
			}
		}
	}

	return result
}

func buildYearOffsets() {
	offset := 0

	offsets := make([]int, 0, lastYear-firstYear+1)

	for i := firstYear; i < lastYear; i++ {
		offsets = append(offsets, offset)
		offset += 365

		if isLeapYear(i) {
			offset++
		}
	}

	fmt.Printf("yearOffsets := %#v\n", offsets)
}

// indexOfDay returns how many days is a particular date later than 1/1/1900
func indexOfDay(year int, month int, day int) int {
	// the following line is generated by this function call: buildYearOffsets()
	yearOffsets := []int{0, 365, 730, 1095, 1460, 1826, 2191, 2556, 2921, 3287, 3652, 4017, 4382, 4748, 5113, 5478, 5843, 6209, 6574, 6939, 7304, 7670, 8035, 8400, 8765, 9131, 9496, 9861, 10226, 10592, 10957, 11322, 11687, 12053, 12418, 12783, 13148, 13514, 13879, 14244, 14609, 14975, 15340, 15705, 16070, 16436, 16801, 17166, 17531, 17897, 18262, 18627, 18992, 19358, 19723, 20088, 20453, 20819, 21184, 21549, 21914, 22280, 22645, 23010, 23375, 23741, 24106, 24471, 24836, 25202, 25567, 25932, 26297, 26663, 27028, 27393, 27758, 28124, 28489, 28854, 29219, 29585, 29950, 30315, 30680, 31046, 31411, 31776, 32141, 32507, 32872, 33237, 33602, 33968, 34333, 34698, 35063, 35429, 35794, 36159, 36524, 36890, 37255, 37620, 37985, 38351, 38716, 39081, 39446, 39812, 40177, 40542, 40907, 41273, 41638, 42003, 42368, 42734, 43099, 43464, 43829, 44195, 44560, 44925, 45290, 45656, 46021, 46386, 46751, 47117, 47482, 47847, 48212, 48578, 48943, 49308, 49673, 50039, 50404, 50769, 51134, 51500, 51865, 52230, 52595, 52961, 53326, 53691, 54056, 54422, 54787, 55152, 55517, 55883, 56248, 56613, 56978, 57344, 57709, 58074, 58439, 58805, 59170, 59535, 59900, 60266, 60631, 60996, 61361, 61727, 62092, 62457, 62822, 63188, 63553, 63918, 64283, 64649, 65014, 65379, 65744, 66110, 66475, 66840, 67205, 67571, 67936, 68301, 68666, 69032, 69397, 69762, 70127, 70493, 70858, 71223, 71588, 71954, 72319, 72684, 73049, 73414, 73779, 74144, 74509, 74875, 75240, 75605, 75970, 76336, 76701, 77066, 77431, 77797, 78162, 78527, 78892, 79258, 79623, 79988, 80353, 80719, 81084, 81449, 81814, 82180, 82545, 82910, 83275, 83641, 84006, 84371, 84736, 85102, 85467, 85832, 86197, 86563, 86928, 87293, 87658, 88024, 88389, 88754, 89119, 89485, 89850, 90215, 90580, 90946, 91311, 91676, 92041, 92407, 92772, 93137, 93502, 93868, 94233, 94598, 94963, 95329, 95694, 96059, 96424, 96790, 97155, 97520, 97885, 98251, 98616, 98981, 99346, 99712, 100077, 100442, 100807, 101173, 101538, 101903, 102268, 102634, 102999, 103364, 103729, 104095, 104460, 104825, 105190, 105556, 105921, 106286, 106651, 107017, 107382, 107747, 108112, 108478, 108843, 109208, 109573, 109938, 110303, 110668, 111033, 111399, 111764, 112129, 112494, 112860, 113225, 113590, 113955, 114321, 114686, 115051, 115416, 115782, 116147, 116512, 116877, 117243, 117608, 117973, 118338, 118704, 119069, 119434, 119799, 120165, 120530, 120895, 121260, 121626, 121991, 122356, 122721, 123087, 123452, 123817, 124182, 124548, 124913, 125278, 125643, 126009, 126374, 126739, 127104, 127470, 127835, 128200, 128565, 128931, 129296, 129661, 130026, 130392, 130757, 131122, 131487, 131853, 132218, 132583, 132948, 133314, 133679, 134044, 134409, 134775, 135140, 135505, 135870, 136236, 136601, 136966, 137331, 137697, 138062, 138427, 138792, 139158, 139523, 139888, 140253, 140619, 140984, 141349, 141714, 142080, 142445, 142810, 143175, 143541, 143906, 144271, 144636, 145002, 145367, 145732, 146097, 146462, 146827, 147192, 147557, 147923, 148288, 148653, 149018, 149384, 149749, 150114, 150479, 150845, 151210, 151575, 151940, 152306, 152671, 153036, 153401, 153767, 154132, 154497, 154862, 155228, 155593, 155958, 156323, 156689, 157054, 157419, 157784, 158150, 158515, 158880, 159245, 159611, 159976, 160341, 160706, 161072, 161437, 161802, 162167, 162533, 162898, 163263, 163628, 163994, 164359, 164724, 165089, 165455, 165820, 166185, 166550, 166916, 167281, 167646, 168011, 168377, 168742, 169107, 169472, 169838, 170203, 170568, 170933, 171299, 171664, 172029, 172394, 172760, 173125, 173490, 173855, 174221, 174586, 174951, 175316, 175682, 176047, 176412, 176777, 177143, 177508, 177873, 178238, 178604, 178969, 179334, 179699, 180065, 180430, 180795, 181160, 181526, 181891, 182256, 182621, 182987, 183352, 183717, 184082, 184448, 184813, 185178, 185543, 185909, 186274, 186639, 187004, 187370, 187735, 188100, 188465, 188831, 189196, 189561, 189926, 190292, 190657, 191022, 191387, 191753, 192118, 192483, 192848, 193214, 193579, 193944, 194309, 194675, 195040, 195405, 195770, 196136, 196501, 196866, 197231, 197597, 197962, 198327, 198692, 199058, 199423, 199788, 200153, 200519, 200884, 201249, 201614, 201980, 202345, 202710, 203075, 203441, 203806, 204171, 204536, 204902, 205267, 205632, 205997, 206363, 206728, 207093, 207458, 207824, 208189, 208554, 208919, 209285, 209650, 210015, 210380, 210746, 211111, 211476, 211841, 212207, 212572, 212937, 213302, 213668, 214033, 214398, 214763, 215129, 215494, 215859, 216224, 216590, 216955, 217320, 217685, 218051, 218416, 218781, 219146, 219511, 219876, 220241, 220606, 220972, 221337, 221702, 222067, 222433, 222798, 223163, 223528, 223894, 224259, 224624, 224989, 225355, 225720, 226085, 226450, 226816, 227181, 227546, 227911, 228277, 228642, 229007, 229372, 229738, 230103, 230468, 230833, 231199, 231564, 231929, 232294, 232660, 233025, 233390, 233755, 234121, 234486, 234851, 235216, 235582, 235947, 236312, 236677, 237043, 237408, 237773, 238138, 238504, 238869, 239234, 239599, 239965, 240330, 240695, 241060, 241426, 241791, 242156, 242521, 242887, 243252, 243617, 243982, 244348, 244713, 245078, 245443, 245809, 246174, 246539, 246904, 247270, 247635, 248000, 248365, 248731, 249096, 249461, 249826, 250192, 250557, 250922, 251287, 251653, 252018, 252383, 252748, 253114, 253479, 253844, 254209, 254575, 254940, 255305, 255670, 256035, 256400, 256765, 257130, 257496, 257861, 258226, 258591, 258957, 259322, 259687, 260052, 260418, 260783, 261148, 261513, 261879, 262244, 262609, 262974, 263340, 263705, 264070, 264435, 264801, 265166, 265531, 265896, 266262, 266627, 266992, 267357, 267723, 268088, 268453, 268818, 269184, 269549, 269914, 270279, 270645, 271010, 271375, 271740, 272106, 272471, 272836, 273201, 273567, 273932, 274297, 274662, 275028, 275393, 275758, 276123, 276489, 276854, 277219, 277584, 277950, 278315, 278680, 279045, 279411, 279776, 280141, 280506, 280872, 281237, 281602, 281967, 282333, 282698, 283063, 283428, 283794, 284159, 284524, 284889, 285255, 285620, 285985, 286350, 286716, 287081, 287446, 287811, 288177, 288542, 288907, 289272, 289638, 290003, 290368, 290733, 291099, 291464, 291829, 292194, 292559, 292924, 293289, 293654, 294020, 294385, 294750, 295115, 295481, 295846, 296211, 296576, 296942, 297307, 297672, 298037, 298403, 298768, 299133, 299498, 299864, 300229, 300594, 300959, 301325, 301690, 302055, 302420, 302786, 303151, 303516, 303881, 304247, 304612, 304977, 305342, 305708, 306073, 306438, 306803, 307169, 307534, 307899, 308264, 308630, 308995, 309360, 309725, 310091, 310456, 310821, 311186, 311552, 311917, 312282, 312647, 313013, 313378, 313743, 314108, 314474, 314839, 315204, 315569, 315935, 316300, 316665, 317030, 317396, 317761, 318126, 318491, 318857, 319222, 319587, 319952, 320318, 320683, 321048, 321413, 321779, 322144, 322509, 322874, 323240, 323605, 323970, 324335, 324701, 325066, 325431, 325796, 326162, 326527, 326892, 327257, 327623, 327988, 328353, 328718, 329084, 329449, 329814, 330179, 330545, 330910, 331275, 331640, 332006, 332371, 332736, 333101, 333467, 333832, 334197, 334562, 334928, 335293, 335658, 336023, 336389, 336754, 337119, 337484, 337850, 338215, 338580, 338945, 339311, 339676, 340041, 340406, 340772, 341137, 341502, 341867, 342233, 342598, 342963, 343328, 343694, 344059, 344424, 344789, 345155, 345520, 345885, 346250, 346616, 346981, 347346, 347711, 348077, 348442, 348807, 349172, 349538, 349903, 350268, 350633, 350999, 351364, 351729, 352094, 352460, 352825, 353190, 353555, 353921, 354286, 354651, 355016, 355382, 355747, 356112, 356477, 356843, 357208, 357573, 357938, 358304, 358669, 359034, 359399, 359765, 360130, 360495, 360860, 361226, 361591, 361956, 362321, 362687, 363052, 363417, 363782, 364148, 364513, 364878, 365243, 365608, 365973, 366338, 366703, 367069, 367434, 367799, 368164, 368530, 368895, 369260, 369625, 369991, 370356, 370721, 371086, 371452, 371817, 372182, 372547, 372913, 373278, 373643, 374008, 374374, 374739, 375104, 375469, 375835, 376200, 376565, 376930, 377296, 377661, 378026, 378391, 378757, 379122, 379487, 379852, 380218, 380583, 380948, 381313, 381679, 382044, 382409, 382774, 383140, 383505, 383870, 384235, 384601, 384966, 385331, 385696, 386062, 386427, 386792, 387157, 387523, 387888, 388253, 388618, 388984, 389349, 389714, 390079, 390445, 390810, 391175, 391540, 391906, 392271, 392636, 393001, 393367, 393732, 394097, 394462, 394828, 395193, 395558, 395923, 396289, 396654, 397019, 397384, 397750, 398115, 398480, 398845, 399211, 399576, 399941, 400306, 400672, 401037}

	return yearOffsets[year-firstYear] + indexOfDayWithinAYear(year, month, day)
}
